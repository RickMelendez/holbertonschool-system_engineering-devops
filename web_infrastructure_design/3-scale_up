# Infrastructure Design

## 1. **Adding a Server**
   **Reason:**  
   A server is the foundational component for running various services. This initial server will serve as the basis for our other components (web server, application server, database) and ensure that there is a physical or virtual machine where we can install the necessary services.  
   - The first server can be used to deploy any of the services or to serve as a jump host for management purposes.

## 2. **Load Balancer (HAProxy) Configured as a Cluster**
   **Reason:**  
   HAProxy is a powerful, high-performance TCP/HTTP load balancer that helps in distributing incoming network traffic across multiple servers to optimize resource utilization, improve application availability, and ensure fault tolerance. Configuring HAProxy in a cluster (active-passive or active-active) ensures high availability.
   - **Active-Passive HAProxy Cluster:** One load balancer is the primary and the other one is the secondary. If the primary fails, the secondary takes over.
   - **Active-Active HAProxy Cluster:** Both load balancers work simultaneously, sharing the load equally. If one fails, the other continues to handle traffic.
   - This clustering improves fault tolerance, scalability, and prevents a single point of failure in load balancing.

## 3. **Web Server**
   **Reason:**  
   The web server is the front-facing part of the application that handles HTTP requests from users. It serves static content like HTML, CSS, JavaScript, and images. It also forwards dynamic requests to the application server.  
   - Web servers like Apache or Nginx are typical choices. They handle incoming traffic and provide the necessary interface for users to access your application.
   - This component needs to be scaled horizontally to handle increasing traffic, which is where the load balancer will come in to distribute requests efficiently.

## 4. **Application Server**
   **Reason:**  
   The application server is responsible for executing the logic of your application. It takes requests from the web server, processes them (business logic, database queries, etc.), and returns the results to the web server to send back to the client.  
   - The application server can be scaled horizontally as well to handle larger loads or spikes in traffic, and load balancers help in distributing requests across multiple application servers.
   - It's crucial to separate the application server from the web server for better modularity, easier scaling, and increased security.

## 5. **Database Server**
   **Reason:**  
   The database server holds the critical data for your application. It's responsible for storing, retrieving, and managing data. Separating the database from the application server ensures that your application has a dedicated and optimized environment for handling data transactions.
   - Using a separate server allows the database to be more fine-tuned for performance and can support larger datasets.
   - For high availability and scalability, database clustering or replication can be added in the future. Techniques like master-slave replication, sharding, or multi-master setups can be employed to ensure data integrity and availability in a distributed environment.
```mermaid
graph TD
    A[User Browser] -->|HTTPS Request| LB1[Load Balancer - HAProxy]
    A[User Browser] -->|HTTPS Request| LB2[Load Balancer - HAProxy Clustered]
    
    subgraph Load Balancer Cluster
        LB1 --- LB2
    end

    LB1 --> WS1[Web Server 1 - Nginx]
    LB2 --> WS2[Web Server 2 - Nginx]
    
    WS1 --> AS1[Application Server 1]
    WS2 --> AS2[Application Server 2]
    
    AS1 --> DB1[Database Server - MySQL Primary]
    AS2 --> DB1[Database Server - MySQL Primary]

    subgraph Firewalls
        LB1 --> FW1[Firewall 1 - Load Balancer]
        LB2 --> FW1
        WS1 --> FW2[Firewall 2 - Web Servers]
        WS2 --> FW2
        AS1 --> FW3[Firewall 3 - Application Servers]
        AS2 --> FW3
        DB1 --> FW3
    end

    subgraph Monitoring
        LB1 --> M1[Monitoring Client - Load Balancer]
        LB2 --> M2[Monitoring Client - Load Balancer]
        DB1 --> M3[Monitoring Client - Database]
    end

    subgraph Application Files
        AS1 --> CODE[Application Files]
        AS2 --> CODE
    end
```

## Architecture Overview

1. **HAProxy Cluster:**
   - A pair of HAProxy servers for load balancing web and application servers.

2. **Web Servers (Multiple):**
   - Multiple web servers distribute traffic to application servers based on HAProxy's configuration.

3. **Application Servers (Multiple):**
   - These servers run the application logic and interact with the database servers to provide data to the clients.

4. **Database Server (Single or Clustered):**
   - A single database server or a cluster of database servers that hold application data.

## Why this setup?

- **Scalability:** Load balancing ensures that as traffic increases, additional web and application servers can be added to the infrastructure.
- **Redundancy and Fault Tolerance:** The HAProxy cluster ensures high availability. In case one load balancer or server fails, the system continues functioning smoothly.
- **Separation of Concerns:** By splitting the roles of web server, application server, and database server, each component can be optimized and scaled independently. This is important for resource management, security, and performance.
- **Performance Optimization:** Load balancing helps distribute the load evenly across the web and application servers, ensuring that no single server is overwhelmed, which improves response time and reduces bottlenecks.
- **Future Growth:** This architecture allows you to add more servers or clusters without significant changes to the existing setup, thus future-proofing the infrastructure.
